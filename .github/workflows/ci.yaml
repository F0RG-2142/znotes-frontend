name: Build and Release Frontend (Linux + Windows)

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: frontend-server

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build React App
        run: |
          npm ci
          npm run build
          echo "Frontend built: dist/ created"

      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 1

  build-binaries:
    needs: build-frontend
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
            suffix: linux-amd64
          
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
            suffix: windows-amd64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      # Copy dist into frontend-go-server
      - name: Copy dist to Go server (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm -rf frontend-go-server/dist
          cp -r dist frontend-go-server/dist
        shell: bash

      - name: Copy dist to Go server (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Remove-Item -Force -Recurse -Path "frontend-go-server\dist" -ErrorAction SilentlyContinue
          Copy-Item -Recurse -Path "dist" -Destination "frontend-go-server\dist"
        shell: pwsh

      # Build binary
      - name: Build Go Server
        working-directory: frontend-go-server
        run: go build -o ${{ env.BINARY_NAME }}-${{ matrix.suffix }}${{ matrix.ext }} .
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      # Upload binary artifact
      - name: Upload binary for release
        uses: actions/upload-artifact@v4
        with:
          name: frontend-binaries-${{ matrix.suffix }}
          path: frontend-go-server/${{ env.BINARY_NAME }}-${{ matrix.suffix }}${{ matrix.ext }}
          retention-days: 1

  # Create github release and upload assets
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Get version from tag
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: frontend-binaries-linux-amd64
          path: ./binaries

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: frontend-binaries-windows-amd64
          path: ./binaries

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/frontend-server-linux-amd64
          asset_name: frontend-server-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/frontend-server-windows-amd64.exe
          asset_name: frontend-server-windows-amd64.exe
          asset_content_type: application/octet-stream